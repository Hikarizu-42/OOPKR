#include<iostream>
#include<fstream>
#include<string>
#include<list>
#include<iterator>
#include<algorithm>
#include<functional>
#include<numeric>
#include<cmath>
using namespace std;


class AbsDigit
{
private:
	int number;

public:
	void SetDigit(const int val);
	int GetDigit() const;
	virtual void Output(ostream& toStream)const = 0;
	virtual bool IsLessThan(int *val) = 0;
};
void AbsDigit::SetDigit(const int val)
{
	number = val;
}
int AbsDigit::GetDigit() const
{
	return number;
}

class Expected : public AbsDigit
{
private:
	int number;
public:
	Expected();
	Expected(int val);
	Expected(const Expected &val);

	void SetExp(int val);
	int Get();
	void Output(ostream& toStream)const;
	bool IsLessThan(int *val);
	friend ostream& operator<<(ostream& toStream, const Expected& obj);
	friend istream& operator>>(istream& fromStream, Expected* obj);
	Expected operator=(const Expected val);
	bool operator==(const Expected val);
};
Expected::Expected()
{
	this->number = 0;
}
Expected::Expected(int val)
{
	this->number = val;
}
Expected::Expected(const Expected &val)
{
	this->number = val.number;
}
void Expected::SetExp(int val)
{
	this->number = val;
}
int Expected::Get()
{
	return this->number;
}
void Expected::Output(ostream& toStream)const
{
	toStream << number << endl;;
}
bool Expected::IsLessThan(int *val)
{
	return number < *val;
}
ostream& operator<<(ostream& toStream, const Expected& obj)
{
	obj.Output(toStream);
	return toStream;
}
istream& operator>>(istream& fromStream, Expected* obj)
{
	fromStream >> obj->number;
	return fromStream;
}
Expected Expected::operator=(const Expected val)
{
	this->number = val.number;
	return *this;
}
bool Expected::operator==(const Expected val)
{
	return this->number == val.number;
}

class Observed : public AbsDigit
{
private:
	int number;
public:
	Observed();
	Observed(int val);
	Observed(const Observed &val);

	void SetObs(int val);
	int Get();
	void Output(ostream& toStream)const;
	bool IsLessThan(int *val);
	friend ostream& operator<<(ostream& toStream, const Observed& obj);
	friend istream& operator>>(istream& fromStream, Observed* obj);
	Observed operator=(const Observed val);
	bool operator==(const Observed val);
};
Observed::Observed()
{
	this->number = 0;
}
Observed::Observed(int val)
{
	this->number = val;
}
Observed::Observed(const Observed &val)
{
	this->number = val.number;
}
void Observed::SetObs(int val)
{
	this->number = val;
}
int Observed::Get()
{
	return this->number;
}
void Observed::Output(ostream& toStream)const
{
	toStream << number << endl;;
}
bool Observed::IsLessThan(int *val)
{
	return number < *val;
}
ostream& operator<<(ostream& toStream, const Observed& obj)
{
	obj.Output(toStream);
	return toStream;
}
istream& operator>>(istream& fromStream, Observed* obj)
{
	fromStream >> obj->number;
	return fromStream;
}
Observed Observed::operator=(const Observed val)
{
	this->number = val.number;
	return *this;
}
bool Observed::operator==(const Observed val)
{
	return this->number == val.number;
}

class CGoodnessOfFit
{
private:
	list<AbsDigit*> m_lExp;
	list<AbsDigit*> m_lObs;
	int m_iTotalFreqDiff;
	double m_dChiCalc;
	double m_dChiAlpha;

public:
	CGoodnessOfFit(const char* strFileNameExp, const char* strFileNameObs);
	void CalcTotalFreqDiff();
	void SetChiAlpha(double ChiValue);
	double CalcChi();
	bool CalcGofF() const;
	void SetData(const int iDigit, const int iExpected, const int iObserved);
	void GetData(double& dChiCalc, double& dChiAlpha) const;
	void writeToCout();
	int GetTotalFreqDiff();
	//friend istream& operator>> (istream& fromStream, AbsDigit* &obj);
};

CGoodnessOfFit::CGoodnessOfFit(const char* strFileNameExp, const char* strFileNameObs)
{

	ifstream iStream(strFileNameExp);

	if (iStream.good())
	{

		copy(istream_iterator<AbsDigit*>(iStream), istream_iterator<AbsDigit*>(),
			back_inserter(m_lExp));
	}

	ifstream iStream1(strFileNameObs);

	if (iStream1.good())
	{

		copy(istream_iterator<AbsDigit*>(iStream), istream_iterator<AbsDigit*>(),
			back_inserter(m_lObs));
	}
}


int Sum(int obj, AbsDigit* ob2)
{
	return obj + ob2->GetDigit();
}

void CGoodnessOfFit::CalcTotalFreqDiff()
{
	this->m_iTotalFreqDiff = GetTotalFreqDiff();
}

double CGoodnessOfFit::CalcChi()
{
	int Oi = 0;
	int Ei = 0;
	Oi = accumulate(m_lObs.begin(), m_lObs.end(), Oi, Sum);
	Ei = accumulate(m_lExp.begin(), m_lExp.end(), Ei, Sum);

	m_dChiCalc = sqrt(((Oi - Ei) ^ 2) / Ei);

	return m_dChiCalc;
}

void CGoodnessOfFit::SetChiAlpha(double ChiValue)
{
	m_dChiAlpha = ChiValue;
}

bool CGoodnessOfFit::CalcGofF()	const
{
	return m_dChiCalc < m_dChiAlpha;
}

void CGoodnessOfFit::SetData(const int iDigit, const int iExpected, const int iObserved)
{
	//list<Expected*>::iterator first = m_lExp.begin();
	//list<Expected*>::iterator last = m_lObs.end();
	//while (first != last)
	//{
	//	if ((*first)->GetDigit() == iDigit)
	//	{
	//		(*first)->SetExp(iExpected);
	//		(*m_lObs.begin())->SetDigit(iObserved);
	//		break;
	//	}
	//	first++;
	//	//	first._Ptr->_Myval->setExpectedValue(iExpected);
	//	//	spisukdve.begin()._Ptr->_Myval->setObservedValue(iObserved);
	//	//	break;
	//	//}
	//	//first++;	
	//}
}

void CGoodnessOfFit::GetData(double& dChiCalc, double& dChiAlpha) const
{
	cout << dChiCalc << " - " << dChiAlpha << endl;
};
void CGoodnessOfFit::writeToCout()
{

}

class Search
{
private:
	int iToFind_val;
public:
	Search(int val);
	bool operator () (AbsDigit* &pointer) const;
};

Search::Search(int val)
{
	iToFind_val = val;
}
bool Search::operator () (AbsDigit* &pointer) const
{
	return (pointer->GetDigit() == iToFind_val);
}
int CGoodnessOfFit::GetTotalFreqDiff()
{
	int Exp = 0;
	int Obs = 0;

	Exp = accumulate(m_lExp.begin(), m_lExp.end(), Exp, Sum);
	Obs = accumulate(m_lObs.begin(), m_lObs.end(), Obs, Sum);

	return (Exp - Obs);
}

int main()
{
	system("pause");
	return 0;
};
